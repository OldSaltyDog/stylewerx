.xi(@prop: all; @dur: 200ms; @tf: linear; @delay: 0ms) {
	transition+: @prop @dur @tf;

	& when(@delay > 0) {
		transition+_: @delay;
	}
}

#xi {

	.left() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(left, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(left, @arguments);
		}
	}

	.bg() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(background, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(background, @arguments);
		}
	}

	.bg-pos() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(background-position, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(background-position, @arguments);
		}
	}

	.bs() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(box-shadow, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(box-shadow, @arguments);
		}
	}

	.ts() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(text-shadow, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(text-shadow, @arguments);
		}
	}

	.fc() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(color, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(color, @arguments);
		}
	}

	.bs() {
		.in(@dur: @xi-dur; @tf: @xi-tf-in; @delay: 0ms) {
			.xi(box-shadow, @arguments);
		}
	
		.out(@dur: @xi-dur; @tf: @xi-tf-out; @delay: 0ms) {
			.xi(box-shadow, @arguments);
		}
	}
}